1. 필터링
커널 또는 필터라고 하는 행렬을 정의하고, 이미지 위에서 이동해가며 커널과 겹쳐진 이미지 영영과
연산을 한 후, 그 결과값을 연산을 진행한 이미지 픽셀을 대신하여 새로운 이미지를 만드는 연산

    cv2.filter2D(영상, -1, 커널, 중심점 좌표, 추가될 값, 가장자리 화소처리)
    -1 : 입력과 동일한 크기의 영상
    커널 : 3*3, 5*5 ...
    가장자리 화소처리
        BORDER_CONSTANT : 끝에 자리를 0 (검은색)으로 채우겠느냐
        BORDER_REPLICATE : aaabcdefff 처럼 맨 끝에 해당하는 요소로 채워넣는냐 차이

1) 블러링(Blurring)
초점이 맞지 않은 듯 영상을 흐릿하게 하는 작업
    * 평균 블러링
        cv2.blur(영상, 커널)
        - 가장 일반적인 블러링 방법으로 균일한 값을 정규화 된 커널을 이용한 이미지 필터링 방법
        - 커널 영역 내에서 평균 값으로 해당 픽셀을 대체함
        - 주변 픽셀들의 평균값을 적용하면 픽셀 간 차이가 적어져 선명도가 떨어지므로 전체적으로 흐려짐
        - 필터의 크기가 클수록 평균 블러링을 적용했을 때 선명도가 더 떨어짐

    * 가우시안 블러링
        cv2.GaussianBlur(영상, 출력영상, 커널)
        출력영상 : (0, 0) 일때 입력 영상과 크기가 같은 영상 생성
        커널 : 3 = 3*3
        - 가우시안 분포를 갖는 커널로 블러링 하는 것
        - 대상 픽셀에 가까울수록 많은 영향을 주고, 멀어질수록 적은 영향을 주기 때문에
        원래의 영상과 비슷하면서도 노이즈를 제거하는 효과가 있음


    * 미디언 블러링
        cv2.medianblur(영상, 커널)
        - 커널의 픽셀 값 중 중앙값을 선택
        - 소금 - 후추 잡음을 제거하는 효과

    * 바이레터럴 필터(Bilateral Filter)
        cv2.bilateralFilter(영상, 픽셀의 거리, 시그마 컬러, 시그마 스페이스)
        픽셀의 거리 : -1을 입력하면 자동 결정됨 (각각의 픽셀 값들의 거리)
        시그마 컬러 : 색 공간의 시그마 값
        시그마 스페이스 : 좌표 공간의 시그마 값(값이 클수록 떨어져 있는 픽셀들의 영향을 미침)
            - 색 공간을 얼마나 넓게 쓸 것인가
        - 기존 블러링의 문제점
            잡음을 제거하는 효과는 뛰어났지만, 경계도 흐릿하게 만드는 문제가 발생
        - 개선 방법
            경계도 뚜렷하고 노이즈도 제거되는 효과를 모두 만족 (대신 속도가 느림)

2) 에지(Edge) 검출
    cv2.Canny(영상, 최소임계값, 최대임계값, 커널)
    최소임계값, 최대임계값 :  두 개의 경계 값(Max, Min)을 지정해서 경계에 있는 영역 픽셀을 찾음
    - 영상에서 화소의 밝기가 급격하게 변하는 부분
    - 물체의 윤곽선(경계선)이 해당
    - 에지를 검출 할 수 있으면 물체의 윤곽선을 알 수 있음
    - "케니 애지 검출"은 상당한 수준으로 에지를 신뢰성있게 검출하는 방법

문제
웹캠 영상에서 스페이스바를 누를 때 마다 필터링을 바꾸는 프로그램을 작성 해보자
(단, 영상은 "일반영상", "가우시안 필터영상", "케니 필터영상" 순으로 반복 변경)
